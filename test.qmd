---
title: "Home"
author: "Amogh Patil"
format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
---

```{r setup, echo=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(plotly)
library(maps)
library(jsonlite)
```

```{r data-processing, echo=FALSE}
# Load and process data
power_data <- read_csv("./data/global_power_plant_database.csv")

# Convert data to JSON for use in JavaScript
power_data_json <- jsonlite::toJSON(
  power_data %>% 
    select(name, latitude, longitude, primary_fuel, estimated_generation_gwh_2017),
  dataframe = "rows"
)

# Get unique fuel types
fuel_types <- unique(power_data$primary_fuel)
```

## Power Plant Distribution

Use the inputs below to filter the data and update the map:



<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
// Load the data
var powerData = null;
document.addEventListener('DOMContentLoaded', function() {
  powerData = `r power_data_json`;  // Access data after processing
  updatePlot();
});

// Function to filter data
function filterData(percentage, selectedFuels) {
  var threshold = percentile(powerData.map(d => d.estimated_generation_gwh_2017), 1 - parseInt(percentage, 10) / 100);
  console.log("Threshold:", threshold); // Check threshold value
  console.log("Before length",powerData.length)
  return powerData.filter(d => d.estimated_generation_gwh_2017 > threshold && (selectedFuels.includes('All') || selectedFuels.includes(d.primary_fuel)));
}

//console.log("Threshold:", threshold); // Check threshold value
  
// Function to calculate percentile
function percentile(arr, p) {
  // Sort the array
  arr = arr.sort((a, b) => a - b);

  // Calculate the index based on percentile
  const index = p / 100 * (arr.length - 1);

  // Handle edge cases (0th and 100th percentile)
  if (p === 0) return arr[0];
  if (p === 100) return arr[arr.length - 1];

  // Linear interpolation for non-integer indices
  const lowerIndex = Math.floor(index);
  const upperIndex = Math.ceil(index);
  const weight = index - lowerIndex;

  // Interpolate between lower and upper values
  return (arr[lowerIndex] * (1 - weight)) + (arr[upperIndex] * weight);
}

var layout = {
  title: 'Top Power Plants in Energy Production across the world',
  geo: {
    showland: true,
    showcountries: true,
    showocean: true,
    oceancolor: 'lightblue',
    projection: {type: 'natural earth'}
  }
};
  
// Function to create plot with data length check
function createPlot(data) {
  console.log("After length",data.length)
  var trace = {
    // Your trace definition using data (ensure filtered data)
    type: 'scattergeo',
    mode: 'markers',
    lon: data.map(d => d.longitude),
    lat: data.map(d => d.latitude),
    text: data.map(d => d.name + '<br>' + d.primary_fuel),
    marker: {
      size: 1,
      opacity: 0.8,
      color: data.map(d => d.primary_fuel),
      colorscale: 'Viridis'
    }
  };
  Plotly.newPlot('plotly-div', [trace], layout);
}

// Update plot with filtered data check
function updatePlot() {
  if (powerData) {
    var percentage = document.getElementById('percentage').value;
    var fuelTypes = Array.from(document.getElementById('fuel_type').selectedOptions).map(option => option.value);

    var filteredData = filterData(percentage, fuelTypes);
    createPlot(filteredData);
  }
}

// Initial plot render
document.addEventListener('DOMContentLoaded', function() {
  updatePlot();
});

// Add event listener to percentage input (optional, already in previous code)
//document.getElementById("percentage").addEventListener("change", updatePlot);
</script>

<input type="number" id="percentage" value="50" min="0" max="100">
<select id="fuel_type" multiple>
  <option value="All" selected>All</option>
  `r paste0("<option value='", fuel_types, "'>", fuel_types, "</option>", collapse = "\n")`
</select>
<button onclick="updatePlot()">Update Plot</button>
<div id="plotly-div"></div>



  